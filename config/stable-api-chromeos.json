[
  {
    "namespace": "accessibilityFeatures",
    "description": "Use the <code>chrome.accessibilityFeatures</code> API to manage Chrome's accessibility features. This API relies on the <a href='types#ChromeSetting'>ChromeSetting prototype of the type API</a> for getting and setting individual accessibility features. In order to get feature states the extension must request <code>accessibilityFeatures.read</code> permission. For modifying feature state, the extension needs <code>accessibilityFeatures.modify</code> permission. Note that <code>accessibilityFeatures.modify</code> does not imply <code>accessibilityFeatures.read</code> permission.",
    "properties": {
      "spokenFeedback": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Spoken feedback (text-to-speech). The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "spokenFeedback",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "largeCursor": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Enlarged cursor. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "largeCursor",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "stickyKeys": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Sticky modifier keys (like shift or alt). The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "stickyKeys",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "highContrast": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>High contrast rendering mode. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "highContrast",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "screenMagnifier": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Full screen magnification. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "screenMagnifier",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "autoclick": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Auto mouse click after mouse stops moving. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "autoclick",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "virtualKeyboard": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Virtual on-screen keyboard. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "virtualKeyboard",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "caretHighlight": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Caret highlighting. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "caretHighlight",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "cursorHighlight": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Cursor highlighting. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "cursorHighlight",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "focusHighlight": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Focus highlighting. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "focusHighlight",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "selectToSpeak": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Select-to-speak. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "selectToSpeak",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "switchAccess": {
        "$ref": "types.ChromeSetting",
        "description": "<p><strong>ChromeOS only.</strong></p><p>Switch access. The value indicates whether the feature is enabled or not. <code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.</p>",
        "value": [
          "switchAccess",
          {
            "type": "boolean"
          }
        ],
        "platforms": [
          "chromeos"
        ]
      },
      "animationPolicy": {
        "$ref": "types.ChromeSetting",
        "description": "<code>get()</code> requires <code>accessibilityFeatures.read</code> permission. <code>set()</code> and <code>clear()</code> require <code>accessibilityFeatures.modify</code> permission.",
        "value": [
          "animationPolicy",
          {
            "type": "string",
            "enum": [
              {
                "description": "Images are allowed to animate.",
                "name": "allowed"
              },
              {
                "description": "Images are animated once.",
                "name": "once"
              },
              {
                "description": "Images are not animated.",
                "name": "none"
              }
            ]
          }
        ]
      }
    }
  },
  {
    "types": [
      {
        "id": "Hash",
        "type": "string",
        "enum": [
          "MD5_SHA1",
          "SHA1",
          "SHA256",
          "SHA384",
          "SHA512"
        ]
      },
      {
        "id": "CertificateInfo",
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "ArrayBuffer"
          },
          "supportedHashes": {
            "type": "array",
            "items": {
              "$ref": "Hash"
            }
          }
        }
      },
      {
        "id": "SignRequest",
        "type": "object",
        "properties": {
          "digest": {
            "$ref": "ArrayBuffer"
          },
          "hash": {
            "$ref": "Hash"
          },
          "certificate": {
            "$ref": "ArrayBuffer"
          }
        }
      }
    ],
    "events": [
      {
        "name": "onCertificatesRequested",
        "type": "function",
        "parameters": [
          {
            "optional": false,
            "name": "reportCallback",
            "type": "function",
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "CertificateInfo"
                },
                "optional": false,
                "name": "certificates"
              },
              {
                "$ref": "ResultCallback",
                "optional": false,
                "name": "callback"
              }
            ]
          }
        ]
      },
      {
        "name": "onSignDigestRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "SignRequest",
            "optional": false,
            "name": "request"
          },
          {
            "optional": false,
            "name": "reportCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ArrayBuffer",
                "optional": true,
                "name": "signature"
              }
            ]
          }
        ]
      }
    ],
    "namespace": "certificateProvider",
    "dependencies": [
      "permission:certificateProvider"
    ]
  },
  {
    "types": [
      {
        "id": "ScanOptions",
        "type": "object",
        "properties": {
          "mimeTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "maxImages": {
            "type": "integer",
            "nullable": true
          }
        }
      },
      {
        "id": "ScanResults",
        "type": "object",
        "properties": {
          "dataUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "mimeType": {
            "type": "string"
          }
        }
      }
    ],
    "functions": [
      {
        "name": "scan",
        "type": "function",
        "parameters": [
          {
            "$ref": "ScanOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ScanResults",
                "optional": false,
                "name": "result"
              }
            ]
          }
        ],
        "static": true
      }
    ],
    "namespace": "documentScan",
    "dependencies": [
      "permission:documentScan"
    ]
  },
  {
    "functions": [
      {
        "name": "getDirectoryDeviceId",
        "type": "function",
        "parameters": [
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "type": "string",
                "optional": false,
                "name": "deviceId"
              }
            ]
          }
        ],
        "static": false
      }
    ],
    "namespace": "enterprise.deviceAttributes",
    "dependencies": [
      "permission:enterprise.deviceAttributes"
    ]
  },
  {
    "types": [
      {
        "id": "Token",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "subtleCrypto": {
            "type": "object"
          }
        }
      }
    ],
    "functions": [
      {
        "name": "getTokens",
        "type": "function",
        "parameters": [
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "Token"
                },
                "optional": false,
                "name": "tokens"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "getCertificates",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "tokenId"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "ArrayBuffer"
                },
                "optional": false,
                "name": "certificates"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "importCertificate",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "tokenId"
          },
          {
            "$ref": "ArrayBuffer",
            "optional": false,
            "name": "certificate"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      },
      {
        "name": "removeCertificate",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "tokenId"
          },
          {
            "$ref": "ArrayBuffer",
            "optional": false,
            "name": "certificate"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      },
      {
        "name": "challengeMachineKey",
        "type": "function",
        "parameters": [
          {
            "$ref": "ArrayBuffer",
            "optional": false,
            "name": "challenge"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ArrayBuffer",
                "optional": false,
                "name": "response"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "challengeUserKey",
        "type": "function",
        "parameters": [
          {
            "$ref": "ArrayBuffer",
            "optional": false,
            "name": "challenge"
          },
          {
            "type": "boolean",
            "optional": false,
            "name": "registerKey"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ArrayBuffer",
                "optional": false,
                "name": "response"
              }
            ]
          }
        ],
        "static": true
      }
    ],
    "namespace": "enterprise.platformKeys",
    "dependencies": [
      "permission:enterprise.platformKeys"
    ]
  },
  {
    "namespace": "fileBrowserHandler",
    "description": "Use the <code>chrome.fileBrowserHandler</code> API to extend the Chrome OS file browser. For example, you can use this API to enable users to upload files to your website.",
    "types": [
      {
        "id": "FileHandlerExecuteEventDetails",
        "type": "object",
        "description": "Event details payload for fileBrowserHandler.onExecute event.",
        "properties": {
          "entries": {
            "type": "array",
            "items": {
              "type": "any"
            },
            "description": "Array of Entry instances representing files that are targets of this action (selected in ChromeOS file browser)."
          },
          "tab_id": {
            "type": "integer",
            "optional": true,
            "description": "The ID of the tab that raised this event. Tab IDs are unique within a browser session."
          }
        }
      }
    ],
    "events": [
      {
        "name": "onExecute",
        "type": "function",
        "description": "Fired when file system action is executed from ChromeOS file browser.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "description": "File browser action id as specified in the listener component's manifest."
          },
          {
            "name": "details",
            "$ref": "FileHandlerExecuteEventDetails",
            "description": "File handler execute event details."
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "selectFile",
        "type": "function",
        "description": "Prompts user to select file path under which file should be saved. When the file is selected, file access permission required to use the file (read, write and create) are granted to the caller. The file will not actually get created during the function call, so function caller must ensure its existence before using it. The function has to be invoked with a user gesture.",
        "parameters": [
          {
            "name": "selectionParams",
            "type": "object",
            "description": "Parameters that will be used while selecting the file.",
            "properties": {
              "suggestedName": {
                "type": "string",
                "description": "Suggested name for the file."
              },
              "allowedFileExtensions": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "optional": true,
                "description": "List of file extensions that the selected file can have. The list is also used to specify what files to be shown in the select file dialog. Files with the listed extensions are only shown in the dialog. Extensions should not include the leading '.'. Example: ['jpg', 'png']"
              }
            }
          },
          {
            "name": "callback",
            "type": "function",
            "description": "Function called upon completion.",
            "parameters": [
              {
                "name": "result",
                "description": "Result of the method.",
                "type": "object",
                "properties": {
                  "success": {
                    "type": "boolean",
                    "description": "Whether the file has been selected."
                  },
                  "entry": {
                    "type": "object",
                    "constructor": "Entry",
                    "additionalProperties": {
                      "type": "any"
                    },
                    "optional": true,
                    "description": "Selected file entry. It will be null if a file hasn't been selected."
                  }
                }
              }
            ]
          }
        ]
      }
    ],
    "dependencies": [
      "permission:fileBrowserHandler"
    ]
  },
  {
    "types": [
      {
        "id": "ProviderError",
        "type": "string",
        "enum": [
          "OK",
          "FAILED",
          "IN_USE",
          "EXISTS",
          "NOT_FOUND",
          "ACCESS_DENIED",
          "TOO_MANY_OPENED",
          "NO_MEMORY",
          "NO_SPACE",
          "NOT_A_DIRECTORY",
          "INVALID_OPERATION",
          "SECURITY",
          "ABORT",
          "NOT_A_FILE",
          "NOT_EMPTY",
          "INVALID_URL",
          "IO"
        ]
      },
      {
        "id": "OpenFileMode",
        "type": "string",
        "enum": [
          "READ",
          "WRITE"
        ]
      },
      {
        "id": "ChangeType",
        "type": "string",
        "enum": [
          "CHANGED",
          "DELETED"
        ]
      },
      {
        "id": "CommonActionId",
        "type": "string",
        "enum": [
          "SAVE_FOR_OFFLINE",
          "OFFLINE_NOT_NECESSARY",
          "SHARE"
        ]
      },
      {
        "id": "EntryMetadata",
        "type": "object",
        "properties": {
          "isDirectory": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "nullable": true
          },
          "modificationTime": {
            "type": "object",
            "nullable": true
          },
          "mimeType": {
            "type": "string",
            "nullable": true
          },
          "thumbnail": {
            "type": "string",
            "nullable": true
          }
        }
      },
      {
        "id": "Watcher",
        "type": "object",
        "properties": {
          "entryPath": {
            "type": "string"
          },
          "recursive": {
            "type": "boolean"
          },
          "lastTag": {
            "type": "string",
            "nullable": true
          }
        }
      },
      {
        "id": "OpenedFile",
        "type": "object",
        "properties": {
          "openRequestId": {
            "type": "integer"
          },
          "filePath": {
            "type": "string"
          },
          "mode": {
            "$ref": "OpenFileMode"
          }
        }
      },
      {
        "id": "FileSystemInfo",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "writable": {
            "type": "boolean"
          },
          "openedFilesLimit": {
            "type": "integer"
          },
          "openedFiles": {
            "type": "array",
            "items": {
              "$ref": "OpenedFile"
            }
          },
          "supportsNotifyTag": {
            "type": "boolean",
            "nullable": true
          },
          "watchers": {
            "type": "array",
            "items": {
              "$ref": "Watcher"
            }
          }
        }
      },
      {
        "id": "MountOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "writable": {
            "type": "boolean",
            "nullable": true
          },
          "openedFilesLimit": {
            "type": "integer",
            "nullable": true
          },
          "supportsNotifyTag": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      {
        "id": "UnmountOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          }
        }
      },
      {
        "id": "UnmountRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          }
        }
      },
      {
        "id": "GetMetadataRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "entryPath": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "size": {
            "type": "boolean"
          },
          "modificationTime": {
            "type": "boolean"
          },
          "mimeType": {
            "type": "boolean"
          },
          "thumbnail": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "GetActionsRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "entryPaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      {
        "id": "ReadDirectoryRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "directoryPath": {
            "type": "string"
          },
          "isDirectory": {
            "type": "boolean"
          },
          "name": {
            "type": "boolean"
          },
          "size": {
            "type": "boolean"
          },
          "modificationTime": {
            "type": "boolean"
          },
          "mimeType": {
            "type": "boolean"
          },
          "thumbnail": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "OpenFileRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "filePath": {
            "type": "string"
          },
          "mode": {
            "$ref": "OpenFileMode"
          }
        }
      },
      {
        "id": "CloseFileRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "openRequestId": {
            "type": "integer"
          }
        }
      },
      {
        "id": "ReadFileRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "openRequestId": {
            "type": "integer"
          },
          "offset": {
            "type": "number"
          },
          "length": {
            "type": "number"
          }
        }
      },
      {
        "id": "CreateDirectoryRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "directoryPath": {
            "type": "string"
          },
          "recursive": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "DeleteEntryRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "entryPath": {
            "type": "string"
          },
          "recursive": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "CreateFileRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "filePath": {
            "type": "string"
          }
        }
      },
      {
        "id": "CopyEntryRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "sourcePath": {
            "type": "string"
          },
          "targetPath": {
            "type": "string"
          }
        }
      },
      {
        "id": "MoveEntryRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "sourcePath": {
            "type": "string"
          },
          "targetPath": {
            "type": "string"
          }
        }
      },
      {
        "id": "TruncateRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "filePath": {
            "type": "string"
          },
          "length": {
            "type": "number"
          }
        }
      },
      {
        "id": "WriteFileRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "openRequestId": {
            "type": "integer"
          },
          "offset": {
            "type": "number"
          },
          "data": {
            "$ref": "ArrayBuffer"
          }
        }
      },
      {
        "id": "AbortRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "operationRequestId": {
            "type": "integer"
          }
        }
      },
      {
        "id": "AddWatcherRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "entryPath": {
            "type": "string"
          },
          "recursive": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "RemoveWatcherRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "entryPath": {
            "type": "string"
          },
          "recursive": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "Action",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        }
      },
      {
        "id": "ExecuteActionRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          },
          "entryPaths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "actionId": {
            "type": "string"
          }
        }
      },
      {
        "id": "Change",
        "type": "object",
        "properties": {
          "entryPath": {
            "type": "string"
          },
          "changeType": {
            "$ref": "ChangeType"
          }
        }
      },
      {
        "id": "NotifyOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "observedPath": {
            "type": "string"
          },
          "recursive": {
            "type": "boolean"
          },
          "changeType": {
            "$ref": "ChangeType"
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "Change"
            },
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          }
        }
      },
      {
        "id": "ConfigureRequestedOptions",
        "type": "object",
        "properties": {
          "fileSystemId": {
            "type": "string"
          },
          "requestId": {
            "type": "integer"
          }
        }
      }
    ],
    "functions": [
      {
        "name": "mount",
        "type": "function",
        "parameters": [
          {
            "$ref": "MountOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      },
      {
        "name": "unmount",
        "type": "function",
        "parameters": [
          {
            "$ref": "UnmountOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      },
      {
        "name": "getAll",
        "type": "function",
        "parameters": [
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "FileSystemInfo"
                },
                "optional": false,
                "name": "fileSystems"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "get",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "fileSystemId"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "$ref": "FileSystemInfo",
                "optional": false,
                "name": "fileSystem"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "notify",
        "type": "function",
        "parameters": [
          {
            "$ref": "NotifyOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      }
    ],
    "events": [
      {
        "name": "onUnmountRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "UnmountRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onGetMetadataRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "GetMetadataRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "EntryMetadata",
                "optional": false,
                "name": "metadata"
              }
            ]
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onGetActionsRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "GetActionsRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "Action"
                },
                "optional": false,
                "name": "actions"
              }
            ]
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onReadDirectoryRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "ReadDirectoryRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "EntryMetadata"
                },
                "optional": false,
                "name": "entries"
              },
              {
                "type": "boolean",
                "optional": false,
                "name": "hasMore"
              }
            ]
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onOpenFileRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "OpenFileRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onCloseFileRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "CloseFileRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onReadFileRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "ReadFileRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ArrayBuffer",
                "optional": false,
                "name": "data"
              },
              {
                "type": "boolean",
                "optional": false,
                "name": "hasMore"
              }
            ]
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onCreateDirectoryRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "CreateDirectoryRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onDeleteEntryRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "DeleteEntryRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onCreateFileRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "CreateFileRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onCopyEntryRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "CopyEntryRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onMoveEntryRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "MoveEntryRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onTruncateRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "TruncateRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onWriteFileRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "WriteFileRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onAbortRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "AbortRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onConfigureRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "ConfigureRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onMountRequested",
        "type": "function",
        "parameters": [
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onAddWatcherRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "AddWatcherRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onRemoveWatcherRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "RemoveWatcherRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      },
      {
        "name": "onExecuteActionRequested",
        "type": "function",
        "parameters": [
          {
            "$ref": "ExecuteActionRequestedOptions",
            "optional": false,
            "name": "options"
          },
          {
            "optional": false,
            "name": "successCallback",
            "type": "function",
            "parameters": []
          },
          {
            "optional": false,
            "name": "errorCallback",
            "type": "function",
            "parameters": [
              {
                "$ref": "ProviderError",
                "optional": false,
                "name": "error"
              }
            ]
          }
        ]
      }
    ],
    "namespace": "fileSystemProvider",
    "dependencies": [
      "permission:fileSystemProvider"
    ]
  },
  {
    "namespace": "input.ime",
    "description": "Use the <code>chrome.input.ime</code> API to implement a custom IME for Chrome OS. This allows your extension to handle keystrokes, set the composition, and manage the candidate window.",
    "types": [
      {
        "id": "KeyboardEventType",
        "type": "string",
        "enum": [
          "keyup",
          "keydown"
        ]
      },
      {
        "id": "KeyboardEvent",
        "type": "object",
        "description": "See http://www.w3.org/TR/DOM-Level-3-Events/#events-KeyboardEvent",
        "properties": {
          "type": {
            "$ref": "KeyboardEventType",
            "description": "One of keyup or keydown."
          },
          "requestId": {
            "type": "string",
            "description": "The ID of the request."
          },
          "extensionId": {
            "type": "string",
            "optional": true,
            "description": "The extension ID of the sender of this keyevent."
          },
          "key": {
            "type": "string",
            "description": "Value of the key being pressed"
          },
          "code": {
            "type": "string",
            "description": "Value of the physical key being pressed. The value is not affected by current keyboard layout or modifier state."
          },
          "keyCode": {
            "type": "integer",
            "optional": true,
            "description": "The deprecated HTML keyCode, which is system- and implementation-dependent numerical code signifying the unmodified identifier associated with the key pressed."
          },
          "altKey": {
            "type": "boolean",
            "optional": true,
            "description": "Whether or not the ALT key is pressed."
          },
          "ctrlKey": {
            "type": "boolean",
            "optional": true,
            "description": "Whether or not the CTRL key is pressed."
          },
          "shiftKey": {
            "type": "boolean",
            "optional": true,
            "description": "Whether or not the SHIFT key is pressed."
          },
          "capsLock": {
            "type": "boolean",
            "optional": true,
            "description": "Whether or not the CAPS_LOCK is enabled."
          }
        }
      },
      {
        "id": "InputContextType",
        "type": "string",
        "description": "Type of value this text field edits, (Text, Number, URL, etc)",
        "enum": [
          "text",
          "search",
          "tel",
          "url",
          "email",
          "number",
          "password"
        ]
      },
      {
        "id": "InputContext",
        "type": "object",
        "description": "Describes an input Context",
        "properties": {
          "contextID": {
            "type": "integer",
            "description": "This is used to specify targets of text field operations.  This ID becomes invalid as soon as onBlur is called."
          },
          "type": {
            "$ref": "InputContextType",
            "description": "Type of value this text field edits, (Text, Number, URL, etc)"
          },
          "autoCorrect": {
            "type": "boolean",
            "description": "Whether the text field wants auto-correct."
          },
          "autoComplete": {
            "type": "boolean",
            "description": "Whether the text field wants auto-complete."
          },
          "spellCheck": {
            "type": "boolean",
            "description": "Whether the text field wants spell-check."
          }
        }
      },
      {
        "id": "MenuItemStyle",
        "type": "string",
        "description": "The type of menu item. Radio buttons between separators are considered grouped.",
        "enum": [
          "check",
          "radio",
          "separator"
        ]
      },
      {
        "id": "MenuItem",
        "type": "object",
        "description": "A menu item used by an input method to interact with the user from the language menu.",
        "properties": {
          "id": {
            "type": "string",
            "description": "String that will be passed to callbacks referencing this MenuItem."
          },
          "label": {
            "type": "string",
            "optional": true,
            "description": "Text displayed in the menu for this item."
          },
          "style": {
            "$ref": "MenuItemStyle",
            "optional": true,
            "description": "The type of menu item."
          },
          "visible": {
            "type": "boolean",
            "optional": true,
            "description": "Indicates this item is visible."
          },
          "checked": {
            "type": "boolean",
            "optional": true,
            "description": "Indicates this item should be drawn with a check."
          },
          "enabled": {
            "type": "boolean",
            "optional": true,
            "description": "Indicates this item is enabled."
          }
        }
      },
      {
        "id": "UnderlineStyle",
        "type": "string",
        "description": "The type of the underline to modify this segment.",
        "enum": [
          "underline",
          "doubleUnderline",
          "noUnderline"
        ]
      },
      {
        "id": "WindowPosition",
        "type": "string",
        "description": "Where to display the candidate window. If set to 'cursor', the window follows the cursor. If set to 'composition', the window is locked to the beginning of the composition.",
        "enum": [
          "cursor",
          "composition"
        ]
      },
      {
        "id": "ScreenType",
        "type": "string",
        "enum": [
          "normal",
          "login",
          "lock",
          "secondary-login"
        ],
        "description": "The screen type under which the IME is activated."
      },
      {
        "id": "CallbackStyle",
        "type": "string",
        "enum": [
          "async"
        ]
      },
      {
        "id": "MouseButton",
        "type": "string",
        "description": "Which mouse buttons was clicked.",
        "enum": [
          "left",
          "middle",
          "right"
        ]
      },
      {
        "id": "WindowType",
        "type": "string",
        "description": "The IME window types.",
        "platforms": [
          "win",
          "linux"
        ],
        "enum": [
          "normal",
          "followCursor"
        ]
      },
      {
        "id": "Bounds",
        "type": "object",
        "description": "Describes the screen coordinates of a rect.",
        "platforms": [
          "win",
          "linux"
        ],
        "properties": {
          "left": {
            "type": "integer",
            "description": "The left of the bounds."
          },
          "top": {
            "type": "integer",
            "description": "The top of the bounds."
          },
          "width": {
            "type": "integer",
            "description": "The width of the bounds."
          },
          "height": {
            "type": "integer",
            "description": "The height of the bounds ."
          }
        }
      },
      {
        "id": "CreateWindowOptions",
        "type": "object",
        "description": "The options to create an IME window",
        "platforms": [
          "win",
          "linux"
        ],
        "properties": {
          "windowType": {
            "$ref": "WindowType"
          },
          "url": {
            "type": "string",
            "optional": true
          },
          "bounds": {
            "$ref": "Bounds",
            "optional": true
          }
        }
      }
    ],
    "functions": [
      {
        "name": "setComposition",
        "type": "function",
        "description": "Set the current composition. If this extension does not own the active IME, this fails.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "contextID": {
                "description": "ID of the context where the composition text will be set",
                "type": "integer"
              },
              "text": {
                "description": "Text to set",
                "type": "string"
              },
              "selectionStart": {
                "description": "Position in the text that the selection starts at.",
                "optional": true,
                "type": "integer"
              },
              "selectionEnd": {
                "description": "Position in the text that the selection ends at.",
                "optional": true,
                "type": "integer"
              },
              "cursor": {
                "description": "Position in the text of the cursor.",
                "type": "integer"
              },
              "segments": {
                "description": "List of segments and their associated types.",
                "type": "array",
                "optional": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "start": {
                      "description": "Index of the character to start this segment at",
                      "type": "integer"
                    },
                    "end": {
                      "description": "Index of the character to end this segment after.",
                      "type": "integer"
                    },
                    "style": {
                      "$ref": "UnderlineStyle",
                      "description": "The type of the underline to modify this segment."
                    }
                  }
                }
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, chrome.runtime.lastError is set.",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      },
      {
        "name": "clearComposition",
        "type": "function",
        "description": "Clear the current composition. If this extension does not own the active IME, this fails.",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "contextID": {
                "description": "ID of the context where the composition will be cleared",
                "type": "integer"
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, chrome.runtime.lastError is set.",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      },
      {
        "name": "commitText",
        "type": "function",
        "description": "Commits the provided text to the current input.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "contextID": {
                "description": "ID of the context where the text will be committed",
                "type": "integer"
              },
              "text": {
                "description": "The text to commit",
                "type": "string"
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes with a boolean indicating if the text was accepted or not. On failure, chrome.runtime.lastError is set.",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      },
      {
        "name": "sendKeyEvents",
        "type": "function",
        "description": "Sends the key events.  This function is expected to be used by virtual keyboards.  When key(s) on a virtual keyboard is pressed by a user, this function is used to propagate that event to the system.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "contextID": {
                "description": "ID of the context where the key events will be sent, or zero to send key events to non-input field.",
                "type": "integer"
              },
              "keyData": {
                "type": "array",
                "description": "Data on the key event.",
                "items": {
                  "$ref": "KeyboardEvent"
                }
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": []
          }
        ]
      },
      {
        "name": "hideInputView",
        "type": "function",
        "description": "Hides the input view window, which is popped up automatically by system. If the input view window is already hidden, this function will do nothing.",
        "platforms": [
          "chromeos"
        ],
        "parameters": []
      },
      {
        "name": "setCandidateWindowProperties",
        "type": "function",
        "description": "Sets the properties of the candidate window. This fails if the extension doesn't own the active IME",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "engineID": {
                "description": "ID of the engine to set properties on.",
                "type": "string"
              },
              "properties": {
                "type": "object",
                "properties": {
                  "visible": {
                    "type": "boolean",
                    "optional": true,
                    "description": "True to show the Candidate window, false to hide it."
                  },
                  "cursorVisible": {
                    "type": "boolean",
                    "optional": true,
                    "description": "True to show the cursor, false to hide it."
                  },
                  "vertical": {
                    "type": "boolean",
                    "optional": true,
                    "description": "True if the candidate window should be rendered vertical, false to make it horizontal."
                  },
                  "pageSize": {
                    "type": "integer",
                    "optional": true,
                    "description": "The number of candidates to display per page."
                  },
                  "auxiliaryText": {
                    "type": "string",
                    "optional": true,
                    "description": "Text that is shown at the bottom of the candidate window."
                  },
                  "auxiliaryTextVisible": {
                    "type": "boolean",
                    "optional": true,
                    "description": "True to display the auxiliary text, false to hide it."
                  },
                  "windowPosition": {
                    "$ref": "WindowPosition",
                    "description": "Where to display the candidate window.",
                    "optional": true
                  }
                }
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      },
      {
        "name": "setCandidates",
        "type": "function",
        "description": "Sets the current candidate list. This fails if this extension doesn't own the active IME",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "contextID": {
                "description": "ID of the context that owns the candidate window.",
                "type": "integer"
              },
              "candidates": {
                "description": "List of candidates to show in the candidate window",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "candidate": {
                      "type": "string",
                      "description": "The candidate"
                    },
                    "id": {
                      "type": "integer",
                      "description": "The candidate's id"
                    },
                    "parentId": {
                      "type": "integer",
                      "optional": true,
                      "description": "The id to add these candidates under"
                    },
                    "label": {
                      "type": "string",
                      "optional": true,
                      "description": "Short string displayed to next to the candidate, often the shortcut key or index"
                    },
                    "annotation": {
                      "type": "string",
                      "optional": true,
                      "description": "Additional text describing the candidate"
                    },
                    "usage": {
                      "type": "object",
                      "optional": true,
                      "description": "The usage or detail description of word.",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The title string of details description."
                        },
                        "body": {
                          "type": "string",
                          "description": "The body string of detail description."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      },
      {
        "name": "setCursorPosition",
        "type": "function",
        "description": "Set the position of the cursor in the candidate window. This is a no-op if this extension does not own the active IME.",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "contextID": {
                "description": "ID of the context that owns the candidate window.",
                "type": "integer"
              },
              "candidateID": {
                "description": "ID of the candidate to select.",
                "type": "integer"
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes",
            "parameters": [
              {
                "name": "success",
                "type": "boolean"
              }
            ]
          }
        ]
      },
      {
        "name": "setMenuItems",
        "type": "function",
        "description": "Adds the provided menu items to the language menu when this IME is active.",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "engineID": {
                "description": "ID of the engine to use",
                "type": "string"
              },
              "items": {
                "description": "MenuItems to add. They will be added in the order they exist in the array.",
                "type": "array",
                "items": {
                  "$ref": "MenuItem"
                }
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "",
            "parameters": []
          }
        ]
      },
      {
        "name": "updateMenuItems",
        "type": "function",
        "description": "Updates the state of the MenuItems specified",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "engineID": {
                "description": "ID of the engine to use",
                "type": "string"
              },
              "items": {
                "description": "Array of MenuItems to update",
                "type": "array",
                "items": {
                  "$ref": "MenuItem"
                }
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes",
            "parameters": []
          }
        ]
      },
      {
        "name": "deleteSurroundingText",
        "type": "function",
        "description": "Deletes the text around the caret.",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "name": "parameters",
            "type": "object",
            "properties": {
              "engineID": {
                "type": "string",
                "description": "ID of the engine receiving the event."
              },
              "contextID": {
                "type": "integer",
                "description": "ID of the context where the surrounding text will be deleted."
              },
              "offset": {
                "type": "integer",
                "description": "The offset from the caret position where deletion will start. This value can be negative."
              },
              "length": {
                "type": "integer",
                "description": "The number of characters to be deleted",
                "minimum": 0
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": []
          }
        ]
      },
      {
        "name": "keyEventHandled",
        "type": "function",
        "description": "Indicates that the key event received by onKeyEvent is handled.  This should only be called if the onKeyEvent listener is asynchronous.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "requestId",
            "description": "Request id of the event that was handled.  This should come from keyEvent.requestId"
          },
          {
            "type": "boolean",
            "name": "response",
            "description": "True if the keystroke was handled, false if not"
          }
        ]
      },
      {
        "name": "createWindow",
        "type": "function",
        "description": "Creates IME window.",
        "platforms": [
          "win",
          "linux"
        ],
        "parameters": [
          {
            "$ref": "CreateWindowOptions",
            "name": "options",
            "description": "The options of the newly created IME window."
          },
          {
            "type": "function",
            "name": "callback",
            "description": "Called when the operation completes.",
            "parameters": [
              {
                "name": "windowObject",
                "type": "object",
                "isInstanceOf": "Window",
                "description": "The JavaScript 'window' object of the newly created IME window. It contains the additional 'id' property for the parameters of the other functions like showWindow/hideWindow."
              }
            ]
          }
        ]
      },
      {
        "name": "showWindow",
        "type": "function",
        "description": "Shows the IME window. This makes the hidden window visible.",
        "platforms": [
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "The ID of the IME window."
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": []
          }
        ]
      },
      {
        "name": "hideWindow",
        "type": "function",
        "description": "Hides the IME window. This doesn't close the window. Instead, it makes the window invisible. The extension can cache the window and show/hide it for better performance.",
        "platforms": [
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "windowId",
            "description": "The ID of the IME window."
          },
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": []
          }
        ]
      },
      {
        "name": "activate",
        "type": "function",
        "description": "Activates the IME extension so that it can receive events.",
        "platforms": [
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": []
          }
        ]
      },
      {
        "name": "deactivate",
        "type": "function",
        "description": "Deactivates the IME extension so that it cannot receive events.",
        "platforms": [
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "function",
            "name": "callback",
            "optional": true,
            "description": "Called when the operation completes.",
            "parameters": []
          }
        ]
      }
    ],
    "events": [
      {
        "name": "onActivate",
        "type": "function",
        "description": "This event is sent when an IME is activated. It signals that the IME will be receiving onKeyPress events.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "engineID",
            "description": "ID of the engine receiving the event"
          },
          {
            "name": "screen",
            "$ref": "ScreenType",
            "description": "The screen type under which the IME is activated."
          }
        ]
      },
      {
        "name": "onDeactivated",
        "type": "function",
        "description": "This event is sent when an IME is deactivated. It signals that the IME will no longer be receiving onKeyPress events.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "engineID",
            "description": "ID of the engine receiving the event"
          }
        ]
      },
      {
        "name": "onFocus",
        "type": "function",
        "description": "This event is sent when focus enters a text box. It is sent to all extensions that are listening to this event, and enabled by the user.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "$ref": "InputContext",
            "name": "context",
            "description": "Describes the text field that has acquired focus."
          }
        ]
      },
      {
        "name": "onBlur",
        "type": "function",
        "description": "This event is sent when focus leaves a text box. It is sent to all extensions that are listening to this event, and enabled by the user.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "integer",
            "name": "contextID",
            "description": "The ID of the text field that has lost focus. The ID is invalid after this call"
          }
        ]
      },
      {
        "name": "onInputContextUpdate",
        "type": "function",
        "description": "This event is sent when the properties of the current InputContext change, such as the the type. It is sent to all extensions that are listening to this event, and enabled by the user.",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "$ref": "InputContext",
            "name": "context",
            "description": "An InputContext object describing the text field that has changed."
          }
        ]
      },
      {
        "name": "onKeyEvent",
        "type": "function",
        "description": "Fired when a key event is sent from the operating system. The event will be sent to the extension if this extension owns the active IME.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "options": {
          "supportsFilters": false,
          "supportsListeners": true,
          "supportsRules": false,
          "maxListeners": 1
        },
        "parameters": [
          {
            "type": "string",
            "name": "engineID",
            "description": "ID of the engine receiving the event"
          },
          {
            "$ref": "KeyboardEvent",
            "name": "keyData",
            "description": "Data on the key event"
          }
        ],
        "extraParameters": [
          {
            "type": "array",
            "optional": true,
            "name": "extraInfoSpec",
            "description": "Array of extra information that specifies how the callback is invoked.",
            "items": {
              "$ref": "CallbackStyle"
            }
          }
        ],
        "returns": {
          "type": "boolean",
          "description": "True if the keystroke was handled, false if not.  This function should always return a value if |async| is not specified.",
          "optional": true
        }
      },
      {
        "name": "onCandidateClicked",
        "type": "function",
        "description": "This event is sent if this extension owns the active IME.",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "engineID",
            "description": "ID of the engine receiving the event"
          },
          {
            "type": "integer",
            "name": "candidateID",
            "description": "ID of the candidate that was clicked."
          },
          {
            "name": "button",
            "$ref": "MouseButton",
            "description": "Which mouse buttons was clicked."
          }
        ]
      },
      {
        "name": "onMenuItemActivated",
        "type": "function",
        "description": "Called when the user selects a menu item",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "engineID",
            "description": "ID of the engine receiving the event"
          },
          {
            "type": "string",
            "name": "name",
            "description": "Name of the MenuItem which was activated"
          }
        ]
      },
      {
        "name": "onSurroundingTextChanged",
        "type": "function",
        "description": "Called when the editable string around caret is changed or when the caret position is moved. The text length is limited to 100 characters for each back and forth direction.",
        "platforms": [
          "chromeos"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "engineID",
            "description": "ID of the engine receiving the event"
          },
          {
            "type": "object",
            "name": "surroundingInfo",
            "description": "The surrounding information.",
            "properties": {
              "text": {
                "type": "string",
                "description": "The text around the cursor. This is only a subset of all text in the input field."
              },
              "focus": {
                "type": "integer",
                "description": "The ending position of the selection. This value indicates caret position if there is no selection."
              },
              "anchor": {
                "type": "integer",
                "description": "The beginning position of the selection. This value indicates caret position if there is no selection."
              },
              "offset": {
                "type": "integer",
                "description": "The offset position of <code>text</code>. Since <code>text</code> only includes a subset of text around the cursor, offset indicates the absolute position of the first character of <code>text</code>."
              }
            }
          }
        ]
      },
      {
        "name": "onReset",
        "type": "function",
        "description": "This event is sent when chrome terminates ongoing text input session.",
        "platforms": [
          "chromeos",
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "engineID",
            "description": "ID of the engine receiving the event"
          }
        ]
      },
      {
        "name": "onCompositionBoundsChanged",
        "type": "function",
        "description": "Triggered when the bounds of the IME composition text or cursor are changed. The IME composition text is the instance of text produced in the input method editor.",
        "platforms": [
          "win",
          "linux"
        ],
        "parameters": [
          {
            "type": "array",
            "name": "boundsList",
            "description": "List of bounds information for each character on IME composition text. If there's no composition text in the editor, this array contains the bound information of the cursor.",
            "items": {
              "$ref": "Bounds"
            }
          }
        ]
      }
    ],
    "dependencies": [
      "permission:input"
    ]
  },
  {
    "types": [
      {
        "id": "NetworkType",
        "type": "string",
        "enum": [
          "WiFi"
        ]
      },
      {
        "id": "NetworkInfo",
        "type": "object",
        "properties": {
          "Type": {
            "$ref": "NetworkType"
          },
          "GUID": {
            "type": "string",
            "nullable": true
          },
          "HexSSID": {
            "type": "string",
            "nullable": true
          },
          "SSID": {
            "type": "string",
            "nullable": true
          },
          "BSSID": {
            "type": "string",
            "nullable": true
          },
          "Security": {
            "type": "string",
            "nullable": true
          }
        }
      },
      {
        "id": "AuthenticationResult",
        "type": "string",
        "enum": [
          "unhandled",
          "succeeded",
          "rejected",
          "failed"
        ]
      }
    ],
    "functions": [
      {
        "name": "setNetworkFilter",
        "type": "function",
        "parameters": [
          {
            "type": "array",
            "items": {
              "$ref": "NetworkInfo"
            },
            "optional": false,
            "name": "networks"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": false
      },
      {
        "name": "finishAuthentication",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "GUID"
          },
          {
            "$ref": "AuthenticationResult",
            "optional": false,
            "name": "result"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": false
      }
    ],
    "events": [
      {
        "name": "onCaptivePortalDetected",
        "type": "function",
        "parameters": [
          {
            "$ref": "NetworkInfo",
            "optional": false,
            "name": "networkInfo"
          }
        ]
      }
    ],
    "namespace": "networking.config",
    "dependencies": [
      "permission:networking.config"
    ]
  },
  {
    "types": [
      {
        "id": "Match",
        "type": "object",
        "properties": {
          "certificate": {
            "$ref": "ArrayBuffer"
          },
          "keyAlgorithm": {
            "type": "object"
          }
        }
      },
      {
        "id": "ClientCertificateType",
        "type": "string",
        "enum": [
          "rsaSign",
          "ecdsaSign"
        ]
      },
      {
        "id": "ClientCertificateRequest",
        "type": "object",
        "properties": {
          "certificateTypes": {
            "type": "array",
            "items": {
              "$ref": "ClientCertificateType"
            }
          },
          "certificateAuthorities": {
            "type": "array",
            "items": {
              "$ref": "ArrayBuffer"
            }
          }
        }
      },
      {
        "id": "SelectDetails",
        "type": "object",
        "properties": {
          "request": {
            "$ref": "ClientCertificateRequest"
          },
          "clientCerts": {
            "type": "array",
            "items": {
              "$ref": "ArrayBuffer"
            },
            "nullable": true
          },
          "interactive": {
            "type": "boolean"
          }
        }
      },
      {
        "id": "VerificationDetails",
        "type": "object",
        "properties": {
          "serverCertificateChain": {
            "type": "array",
            "items": {
              "$ref": "ArrayBuffer"
            }
          },
          "hostname": {
            "type": "string"
          }
        }
      },
      {
        "id": "VerificationResult",
        "type": "object",
        "properties": {
          "trusted": {
            "type": "boolean"
          },
          "debug_errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    ],
    "functions": [
      {
        "name": "selectClientCertificates",
        "type": "function",
        "parameters": [
          {
            "$ref": "SelectDetails",
            "optional": false,
            "name": "details"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "type": "array",
                "items": {
                  "$ref": "Match"
                },
                "optional": false,
                "name": "matches"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "getKeyPair",
        "type": "function",
        "parameters": [
          {
            "$ref": "ArrayBuffer",
            "optional": false,
            "name": "certificate"
          },
          {
            "type": "object",
            "optional": false,
            "name": "parameters"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "type": "object",
                "optional": false,
                "name": "publicKey"
              },
              {
                "type": "object",
                "optional": true,
                "name": "privateKey"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "subtleCrypto",
        "type": "function",
        "static": true
      },
      {
        "name": "verifyTLSServerCertificate",
        "type": "function",
        "parameters": [
          {
            "$ref": "VerificationDetails",
            "optional": false,
            "name": "details"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "$ref": "VerificationResult",
                "optional": false,
                "name": "result"
              }
            ]
          }
        ],
        "static": true
      }
    ],
    "namespace": "platformKeys",
    "dependencies": [
      "permission:platformKeys"
    ]
  },
  {
    "types": [
      {
        "id": "Parameters",
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "broadcastAddress": {
            "type": "string",
            "nullable": true
          },
          "mtu": {
            "type": "string",
            "nullable": true
          },
          "exclusionList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inclusionList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "domainSearch": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "dnsServers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reconnect": {
            "type": "string",
            "nullable": true
          }
        }
      },
      {
        "id": "PlatformMessage",
        "type": "string",
        "enum": [
          "connected",
          "disconnected",
          "error",
          "linkDown",
          "linkUp",
          "linkChanged",
          "suspend",
          "resume"
        ]
      },
      {
        "id": "VpnConnectionState",
        "type": "string",
        "enum": [
          "connected",
          "failure"
        ]
      },
      {
        "id": "UIEvent",
        "type": "string",
        "enum": [
          "showAddDialog",
          "showConfigureDialog"
        ]
      }
    ],
    "functions": [
      {
        "name": "createConfig",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "name"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": [
              {
                "type": "string",
                "optional": false,
                "name": "id"
              }
            ]
          }
        ],
        "static": true
      },
      {
        "name": "destroyConfig",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "id"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      },
      {
        "name": "setParameters",
        "type": "function",
        "parameters": [
          {
            "$ref": "Parameters",
            "optional": false,
            "name": "parameters"
          },
          {
            "optional": false,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      },
      {
        "name": "sendPacket",
        "type": "function",
        "parameters": [
          {
            "$ref": "ArrayBuffer",
            "optional": false,
            "name": "data"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      },
      {
        "name": "notifyConnectionStateChanged",
        "type": "function",
        "parameters": [
          {
            "$ref": "VpnConnectionState",
            "optional": false,
            "name": "state"
          },
          {
            "optional": true,
            "name": "callback",
            "type": "function",
            "parameters": []
          }
        ],
        "static": true
      }
    ],
    "events": [
      {
        "name": "onPlatformMessage",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "id"
          },
          {
            "$ref": "PlatformMessage",
            "optional": false,
            "name": "message"
          },
          {
            "type": "string",
            "optional": false,
            "name": "error"
          }
        ]
      },
      {
        "name": "onPacketReceived",
        "type": "function",
        "parameters": [
          {
            "$ref": "ArrayBuffer",
            "optional": false,
            "name": "data"
          }
        ]
      },
      {
        "name": "onConfigRemoved",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "id"
          }
        ]
      },
      {
        "name": "onConfigCreated",
        "type": "function",
        "parameters": [
          {
            "type": "string",
            "optional": false,
            "name": "id"
          },
          {
            "type": "string",
            "optional": false,
            "name": "name"
          },
          {
            "type": "object",
            "optional": false,
            "name": "data"
          }
        ]
      },
      {
        "name": "onUIEvent",
        "type": "function",
        "parameters": [
          {
            "$ref": "UIEvent",
            "optional": false,
            "name": "event"
          },
          {
            "type": "string",
            "optional": true,
            "name": "id"
          }
        ]
      }
    ],
    "namespace": "vpnProvider",
    "dependencies": [
      "permission:vpnProvider"
    ]
  },
  {
    "namespace": "wallpaper",
    "compiler_options": {
      "implemented_in": "chrome/browser/chromeos/extensions/wallpaper_api.h"
    },
    "description": "Use the <code>chrome.wallpaper</code> API to change the ChromeOS wallpaper.",
    "types": [
      {
        "id": "WallpaperLayout",
        "type": "string",
        "enum": [
          "STRETCH",
          "CENTER",
          "CENTER_CROPPED"
        ],
        "description": "The supported wallpaper layouts."
      }
    ],
    "functions": [
      {
        "name": "setWallpaper",
        "type": "function",
        "description": "Sets wallpaper to the image at <em>url</em> or <em>wallpaperData</em> with the specified <em>layout</em>",
        "parameters": [
          {
            "name": "details",
            "type": "object",
            "properties": {
              "data": {
                "type": "binary",
                "optional": true,
                "description": "The jpeg or png encoded wallpaper image as an ArrayBuffer."
              },
              "url": {
                "type": "string",
                "optional": true,
                "description": "The URL of the wallpaper to be set (can be relative)."
              },
              "layout": {
                "$ref": "WallpaperLayout",
                "description": "The supported wallpaper layouts."
              },
              "filename": {
                "type": "string",
                "description": "The file name of the saved wallpaper."
              },
              "thumbnail": {
                "type": "boolean",
                "optional": true,
                "description": "True if a 128x60 thumbnail should be generated. Layout and ratio are not supported yet."
              }
            }
          },
          {
            "type": "function",
            "name": "callback",
            "parameters": [
              {
                "type": "binary",
                "optional": true,
                "name": "thumbnail",
                "description": "The jpeg encoded wallpaper thumbnail. It is generated by resizing the wallpaper to 128x60."
              }
            ]
          }
        ]
      }
    ],
    "dependencies": [
      "permission:wallpaper"
    ]
  }
]